name: Secure Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  build-and-scan:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker save ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} -o image.tar

      - name: Scan image for vulnerabilities using Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to ECR (if scan passes)
        if: success()
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  deploy:
    name: Deploy (Manual Approval Required)
    needs: [build-and-scan]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-endpoint.example.com
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PAT: ${{ secrets.K8S_REPO_PAT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clone Kubernetes Repo
        run: |
          git clone https://github.com/kishansoni2726/8byte-go-todo-app-k8s.git
          cd 8byte-go-todo-app-k8s

      - name: Update Kubernetes Image Tag
        run: |
          cd 8byte-go-todo-app-k8s
          sed -i "s|image:.*|image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}|" frontend-deploy.yaml

      - name: Commit Manifest Changes
        run: |
          cd 8byte-go-todo-app-k8s
      
          # Safe directory fix
          git config --global --add safe.directory $(pwd)
      
          # Configure git identity
          git config user.email "kishansoni45285@gmail.com"
          git config user.name "kishansoni2726"
      
          # Ensure remote points to authenticated GitHub URL
          git remote remove origin || true
          git remote add origin "https://x-access-token:${PAT}@github.com/kishansoni2726/8byte-go-todo-app-k8s.git"
      
          # Add updated manifest
          git add frontend-deploy.yaml
      
          # Commit changes if any exist
          git commit -m "Update backend image to ${GITHUB_SHA}" || echo "No changes to commit"
      
          # Push to master
          git push origin master
        env:
          PAT: ${{ secrets.K8S_REPO_PAT }}
